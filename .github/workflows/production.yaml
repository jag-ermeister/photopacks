name: Deploy Production Backend

on:
  push:
    branches:
      - master
    paths:
      - "app/**"

concurrency: master

jobs:
  build-and-deploy:
    name: Build zip and deploy to Elastic Beanstalk
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Install Python dependencies
        run: |
          pip install -r app/requirements.txt

      - name: Run Pytest
        run: |
          cd app
          pytest

      - name: Install frontend dependencies
        run: cd app/frontend && npm install

      - name: Build frontend
        run: cd app/frontend && mv src/aws-exports-prod.js src/aws-exports.js && API_HOST="https://www.photopacks.ai" npm run relocate

      - name: Build zip
        run: cd app && ./build-app.sh

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.SECRET_ACCESS_KEY }}
          aws-region: "us-east-1"

      - name: Upload package to S3 bucket
        run: cd app && aws s3 cp app-deployment.zip s3://photo-packs-eb-deploy-prod/

      - name: Create new ElasticBeanstalk Application Version
        run: |
          aws elasticbeanstalk create-application-version \
            --application-name photo-packs-app-prod \
            --source-bundle S3Bucket="photo-packs-eb-deploy-prod",S3Key="app-deployment.zip" \
            --version-label "ver-${{ github.sha }}" \
            --description "commit-sha-${{ github.sha }}"
          echo "::set-output name=version_label::${version_label}"

      - name: Deploy new ElasticBeanstalk Application Version
        run: |
          aws elasticbeanstalk update-environment \
            --environment-name photo-packs-app-env-prod \
            --version-label "ver-${{ github.sha }}"

      - name: Wait for Deployment
        env:
          APP_VERSION: v${{ steps.get-version.outputs.app-version }}
        run: |
          aws elasticbeanstalk wait environment-updated --environment-name photo-packs-app-env-prod \
            --version-label "ver-${{ github.sha }}"

      - name: Discord notification
        if: always()
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK_URL }}
          status: ${{ job.status }}
